/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.apache.skywalking.apm.network.metric";
option csharp_namespace = "SkyWalking.NetworkProtocol";

import "register/Register.proto";
import "common/common.proto";


service MetricService {
    rpc reportEntityMetric (stream EntityMetric) returns (MetricResponse) {
    }

    rpc reportRelationMetric (stream RelationMetric) returns (MetricResponse) {
    }
}

message EntityMetric {
    oneof metric_entity {
        int32 service_id = 1;
        int32 service_instance_id = 2;
        int32 endpoint_id = 3;
    }

    repeated Metric metrics = 4;
}

message RelationMetric {
    oneof source_entity {
        int32 source_service_id = 1;
        int32 source_service_instance_id = 2;
        int32 source_endpoint_id = 3;
    }

    oneof dest_entity {
        int32 dest_service_id = 4;
        int32 dest_service_instance_id = 5;
        int32 dest_endpoint_id = 6;
    }

    Metric metric = 7;
}

message Metric {
    oneof identify {
        string name = 1;
        int32 id = 2;
    }

    int64 time = 3;
    Type type = 4;

    repeated Gauge gaugeValues = 5;
    repeated Histogram histogramValues = 6;

    enum Type {
        GAUGE = 0;
        HISTOGRAM = 1;
    }

    message Gauge {
        int64 value = 2;
    }

    message Histogram {
        repeated IntKeyIntValuePair values = 2;
    }
}

message MetricResponse {

}
